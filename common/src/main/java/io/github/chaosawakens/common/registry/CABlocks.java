package io.github.chaosawakens.common.registry;

import com.google.common.collect.ImmutableList;
import io.github.chaosawakens.CAConstants;
import io.github.chaosawakens.api.asm.annotations.RegistrarEntry;
import io.github.chaosawakens.api.block.standard.BlockPropertyWrapper;
import io.github.chaosawakens.api.platform.CAServices;
import io.github.chaosawakens.common.block.base.general.*;
import io.github.chaosawakens.common.block.base.general.config.VegetationConfig;
import io.github.chaosawakens.common.block.dungeon.general.DungeonGateBlock;
import io.github.chaosawakens.common.block.vegetation.dense.BigCarnivorousPlantBlock;
import io.github.chaosawakens.common.block.vegetation.dense.TerraPretaFarmBlock;
import io.github.chaosawakens.common.block.vegetation.dense.ThornySunBlock;
import io.github.chaosawakens.common.block.vegetation.general.FruitableLeavesBlock;
import io.github.chaosawakens.common.block.vegetation.general.LeafCarpetBlock;
import io.github.chaosawakens.util.PredicateUtil;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.core.Direction;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.properties.NoteBlockInstrument;
import net.minecraft.world.level.material.MapColor;
import net.minecraft.world.level.material.PushReaction;

import java.util.function.Supplier;

@RegistrarEntry
public final class CABlocks {
    private static final ObjectArrayList<Supplier<Block>> BLOCKS = new ObjectArrayList<>();
    private static final ObjectArrayList<Supplier<Item>> BLOCK_ITEMS = new ObjectArrayList<>();

    // Wood Sets
    public static final Supplier<Block> APPLE_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("apple_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> APPLE_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("apple_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_APPLE_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_apple_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(APPLE_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_APPLE_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_apple_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(APPLE_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> APPLE_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("apple_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> APPLE_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("apple_stairs", () -> new StairBlock(APPLE_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(APPLE_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> APPLE_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("apple_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(APPLE_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> APPLE_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("apple_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(APPLE_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> APPLE_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("apple_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(APPLE_PLANKS.get()).forceSolidOn(), CAWoodTypes.APPLE))).getParentBlock();
    public static final Supplier<Block> APPLE_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("apple_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(APPLE_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.APPLE))).getParentBlock();
    public static final Supplier<Block> APPLE_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("apple_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(APPLE_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.APPLE))).getParentBlock();
    public static final Supplier<Block> APPLE_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("apple_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(APPLE_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.APPLE))).getParentBlock();
    public static final Supplier<Block> APPLE_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("apple_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.APPLE, 30, true))).getParentBlock();

    public static final Supplier<Block> CRYSTALWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("crystalwood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("crystalwood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_CRYSTALWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_crystalwood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_CRYSTALWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_crystalwood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD.get())))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("crystalwood_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("crystalwood_stairs", () -> new StairBlock(CRYSTALWOOD_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(CRYSTALWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("crystalwood_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("crystalwood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("crystalwood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD_PLANKS.get()).forceSolidOn(), CAWoodTypes.CRYSTALWOOD))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("crystalwood_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(CRYSTALWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.CRYSTALWOOD))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("crystalwood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(CRYSTALWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.CRYSTALWOOD))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("crystalwood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(CRYSTALWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.CRYSTALWOOD))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("crystalwood_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.CRYSTALWOOD, 30, true))).getParentBlock();

    public static final Supplier<Block> DENSEWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("densewood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("densewood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DENSEWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_densewood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DENSEWOOD_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DENSEWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_densewood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DENSEWOOD.get())))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("densewood_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("densewood_stairs", () -> new StairBlock(DENSEWOOD_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(DENSEWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("densewood_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(DENSEWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("densewood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(DENSEWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("densewood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(DENSEWOOD_PLANKS.get()).forceSolidOn(), CAWoodTypes.DENSEWOOD))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("densewood_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(DENSEWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.DENSEWOOD))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("densewood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(DENSEWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.DENSEWOOD))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("densewood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(DENSEWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.DENSEWOOD))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("densewood_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.DENSEWOOD, 30, true))).getParentBlock();

    public static final Supplier<Block> DUPLICATOR_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("duplicator_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((duplicatorLogBlock) -> duplicatorLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("duplicator_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DUPLICATOR_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_duplicator_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DUPLICATOR_LOG.get()).mapColor((duplicatorLogBlock) -> duplicatorLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_BROWN : MapColor.COLOR_BROWN)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DUPLICATOR_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_duplicator_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DUPLICATOR_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> DEAD_DUPLICATOR_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("dead_duplicator_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((duplicatorLogBlock) -> duplicatorLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_BROWN : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> DEAD_DUPLICATOR_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("dead_duplicator_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DEAD_DUPLICATOR_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_dead_duplicator_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DEAD_DUPLICATOR_LOG.get()).mapColor((duplicatorLogBlock) -> duplicatorLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_DEAD_DUPLICATOR_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_dead_duplicator_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(DEAD_DUPLICATOR_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("duplicator_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("duplicator_stairs", () -> new StairBlock(DUPLICATOR_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(DUPLICATOR_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("duplicator_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(DUPLICATOR_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("duplicator_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(DUPLICATOR_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("duplicator_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(DUPLICATOR_PLANKS.get()).forceSolidOn(), CAWoodTypes.DUPLICATOR))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("duplicator_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(DUPLICATOR_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.DUPLICATOR))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("duplicator_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(DUPLICATOR_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.DUPLICATOR))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("duplicator_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(DUPLICATOR_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.DUPLICATOR))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("duplicator_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.DUPLICATOR, 30, true))).getParentBlock();

    public static final Supplier<Block> GINKGO_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("ginkgo_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> GINKGO_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("ginkgo_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_GINKGO_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_ginkgo_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(GINKGO_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_GINKGO_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_ginkgo_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(GINKGO_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> GINKGO_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("ginkgo_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> GINKGO_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("ginkgo_stairs", () -> new StairBlock(GINKGO_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(GINKGO_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> GINKGO_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("ginkgo_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(GINKGO_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> GINKGO_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("ginkgo_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(GINKGO_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> GINKGO_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("ginkgo_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(GINKGO_PLANKS.get()).forceSolidOn(), CAWoodTypes.GINKGO))).getParentBlock();
    public static final Supplier<Block> GINKGO_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("ginkgo_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(GINKGO_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.GINKGO))).getParentBlock();
    public static final Supplier<Block> GINKGO_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("ginkgo_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(GINKGO_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.GINKGO))).getParentBlock();
    public static final Supplier<Block> GINKGO_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("ginkgo_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(GINKGO_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.GINKGO))).getParentBlock();
    public static final Supplier<Block> GINKGO_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("ginkgo_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.GINKGO, 30, true))).getParentBlock();

    public static final Supplier<Block> MESOZOIC_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("mesozoic_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("mesozoic_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_MESOZOIC_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_mesozoic_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(MESOZOIC_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_MESOZOIC_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_mesozoic_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(MESOZOIC_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("mesozoic_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("mesozoic_stairs", () -> new StairBlock(MESOZOIC_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(MESOZOIC_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("mesozoic_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(MESOZOIC_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("mesozoic_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(MESOZOIC_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("mesozoic_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(MESOZOIC_PLANKS.get()).forceSolidOn(), CAWoodTypes.MESOZOIC))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("mesozoic_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(MESOZOIC_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.MESOZOIC))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("mesozoic_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(MESOZOIC_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.MESOZOIC))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("mesozoic_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(MESOZOIC_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.MESOZOIC))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("mesozoic_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.MESOZOIC, 30, true))).getParentBlock();

    public static final Supplier<Block> PEACH_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("peach_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_ORANGE : MapColor.COLOR_BROWN).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> PEACH_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("peach_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_PEACH_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_peach_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(PEACH_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.TERRACOTTA_ORANGE : MapColor.COLOR_ORANGE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_PEACH_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_peach_wood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(PEACH_WOOD.get())))).getParentBlock();
    public static final Supplier<Block> PEACH_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("peach_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> PEACH_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("peach_stairs", () -> new StairBlock(PEACH_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(PEACH_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> PEACH_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("peach_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(PEACH_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> PEACH_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("peach_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(PEACH_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> PEACH_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("peach_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(PEACH_PLANKS.get()).forceSolidOn(), CAWoodTypes.PEACH))).getParentBlock();
    public static final Supplier<Block> PEACH_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("peach_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(PEACH_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.PEACH))).getParentBlock();
    public static final Supplier<Block> PEACH_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("peach_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(PEACH_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.PEACH))).getParentBlock();
    public static final Supplier<Block> PEACH_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("peach_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(PEACH_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.PEACH))).getParentBlock();
    public static final Supplier<Block> PEACH_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("peach_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.PEACH, 30, true))).getParentBlock();

    public static final Supplier<Block> SKYWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("skywood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_BLUE : MapColor.COLOR_LIGHT_BLUE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> SKYWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("skywood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLUE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> STRIPPED_SKYWOOD_LOG = BlockPropertyWrapper.of(CABlockPropertyWrappers.LOG, registerBlock("stripped_skywood_log", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(SKYWOOD_LOG.get()).mapColor((appleLogBlock) -> appleLogBlock.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? MapColor.COLOR_BLUE : MapColor.COLOR_LIGHT_BLUE)))).getParentBlock();
    public static final Supplier<Block> STRIPPED_SKYWOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOOD, registerBlock("stripped_skywood", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(SKYWOOD.get())))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("skywood_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLUE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD).ignitedByLava()))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_STAIRS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_STAIRS, registerBlock("skywood_stairs", () -> new StairBlock(SKYWOOD_PLANKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(SKYWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("skywood_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(SKYWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("skywood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(SKYWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_FENCE_GATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE_GATE, registerBlock("skywood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(SKYWOOD_PLANKS.get()).forceSolidOn(), CAWoodTypes.SKYWOOD))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_DOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_DOOR, registerBlock("skywood_door", () -> new DoorBlock(BlockBehaviour.Properties.of().mapColor(SKYWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().ignitedByLava().pushReaction(PushReaction.DESTROY).forceSolidOn(), CABlockSetTypes.SKYWOOD))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_TRAPDOOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_TRAPDOOR, registerBlock("skywood_trapdoor", () -> new TrapDoorBlock(BlockBehaviour.Properties.of().mapColor(SKYWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).strength(3.0F).noOcclusion().forceSolidOn().isValidSpawn(PredicateUtil::neverSpawnOnBlock).ignitedByLava(), CABlockSetTypes.SKYWOOD))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_PRESSURE_PLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PRESSURE_PLATE, registerBlock("skywood_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, BlockBehaviour.Properties.of().mapColor(SKYWOOD_PLANKS.get().defaultMapColor()).instrument(NoteBlockInstrument.BASS).forceSolidOn().noCollission().pushReaction(PushReaction.DESTROY).strength(0.5F), CABlockSetTypes.SKYWOOD))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_BUTTON = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_BUTTON, registerBlock("skywood_button", () -> new ButtonBlock(BlockBehaviour.Properties.of().noCollission().strength(0.5F).pushReaction(PushReaction.DESTROY), CABlockSetTypes.SKYWOOD, 30, true))).getParentBlock();

    // Leaves
    public static final Supplier<Block> APPLE_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.FRUITABLE_LEAVES, registerBlock("apple_leaves", () -> new FruitableLeavesBlock(() -> Items.APPLE, BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAVES, registerBlock("densewood_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAVES, registerBlock("duplicator_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> GINKGO_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAVES, registerBlock("ginkgo_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAVES, registerBlock("mesozoic_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> PEACH_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.FRUITABLE_LEAVES, registerBlock("peach_leaves", () -> new FruitableLeavesBlock(CAItems.PEACH, BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_LEAVES = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAVES, registerBlock("skywood_leaves", () -> new LeavesBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES)))).getParentBlock();

    // Leaf Carpets
    public static final Supplier<Block> APPLE_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("apple_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(APPLE_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("densewood_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(DENSEWOOD_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("duplicator_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(DUPLICATOR_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> GINKGO_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("ginkgo_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(GINKGO_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("mesozoic_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(MESOZOIC_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> PEACH_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("peach_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(PEACH_LEAVES.get()).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("skywood_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(SKYWOOD_LEAVES.get()).strength(0.1F)))).getParentBlock();

    public static final Supplier<Block> ACACIA_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("acacia_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> BIRCH_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("birch_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> CHERRY_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("cherry_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.CHERRY_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> DARK_OAK_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("dark_oak_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> MANGROVE_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("mangrove_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.MANGROVE_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> OAK_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("oak_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.OAK_LEAVES).strength(0.1F)))).getParentBlock();
    public static final Supplier<Block> SPRUCE_LEAF_CARPET = BlockPropertyWrapper.of(CABlockPropertyWrappers.LEAF_CARPET, registerBlock("spruce_leaf_carpet", () -> new LeafCarpetBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_LEAVES).strength(0.1F)))).getParentBlock();

    // Dungeon Blocks
    public static final Supplier<Block> APPLE_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("apple_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(APPLE_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> CRYSTALWOOD_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("crystalwood_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(CRYSTALWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DENSEWOOD_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("densewood_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(DENSEWOOD_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> DUPLICATOR_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("duplicator_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(DUPLICATOR_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> GINKGO_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("ginkgo_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(GINKGO_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> MESOZOIC_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("mesozoic_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(MESOZOIC_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> PEACH_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("peach_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(PEACH_PLANKS.get())))).getParentBlock();
    public static final Supplier<Block> SKYWOOD_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("skywood_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(SKYWOOD_PLANKS.get())))).getParentBlock();

    public static final Supplier<Block> ACACIA_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("acacia_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_PLANKS)))).getParentBlock();
    public static final Supplier<Block> BIRCH_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("birch_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_PLANKS)))).getParentBlock();
    public static final Supplier<Block> CHERRY_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("cherry_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.CHERRY_PLANKS)))).getParentBlock();
    public static final Supplier<Block> CRIMSON_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("crimson_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_PLANKS)))).getParentBlock();
    public static final Supplier<Block> DARK_OAK_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("dark_oak_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_PLANKS)))).getParentBlock();
    public static final Supplier<Block> MANGROVE_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("mangrove_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.MANGROVE_PLANKS)))).getParentBlock();
    public static final Supplier<Block> OAK_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("oak_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_PLANKS)))).getParentBlock();
    public static final Supplier<Block> SPRUCE_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("spruce_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_PLANKS)))).getParentBlock();
    public static final Supplier<Block> WARPED_GATE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GATE_BLOCK, registerBlock("warped_gate_block", () -> new DungeonGateBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_PLANKS)))).getParentBlock();

    // Mineral Blocks
    public static final Supplier<Block> KUNZITE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.MATERIAL_BLOCK_DIAMOND, registerBlock("kunzite_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_PURPLE).strength(75.0F, 2400.0F).sound(SoundType.NETHERITE_BLOCK)), new Item.Properties().fireResistant())).getParentBlock();
    public static final Supplier<Block> RUBY_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.MATERIAL_BLOCK_DIAMOND, registerBlock("ruby_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_RED).strength(75.0F, 2400.0F).sound(SoundType.NETHERITE_BLOCK)), new Item.Properties().fireResistant())).getParentBlock();
    public static final Supplier<Block> TITANIUM_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.MATERIAL_BLOCK_DIAMOND, registerBlock("titanium_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLUE).strength(75.0F, 2400.0F).sound(SoundType.NETHERITE_BLOCK)), new Item.Properties().fireResistant())).getParentBlock();
    public static final Supplier<Block> URANIUM_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.MATERIAL_BLOCK_DIAMOND, registerBlock("uranium_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).strength(60.0F, 1800.0F).sound(SoundType.NETHERITE_BLOCK)), new Item.Properties().fireResistant())).getParentBlock();

    // Component Material Blocks
    public static final Supplier<Block> ENDER_PEARL_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_IRON, registerBlock("ender_pearl_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).sound(SoundType.NETHERITE_BLOCK).strength(0.5F)))).getParentBlock();
    public static final Supplier<Block> ENDER_EYE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_IRON, registerBlock("ender_eye_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_LIGHT_GREEN).sound(SoundType.NETHERITE_BLOCK).strength(0.5F)))).getParentBlock();

    public static final Supplier<Block> BASILISK_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("basilisk_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_GREEN).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> EMPEROR_SCORPION_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("emperor_scorpion_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_BLACK).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> ENDER_DRAGON_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("ender_dragon_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_BLACK).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> MOBZILLA_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("mobzilla_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_PURPLE).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> MOTH_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_IRON, registerBlock("moth_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_ORANGE).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> NIGHTMARE_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("nightmare_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.WOOD).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();
    public static final Supplier<Block> QUEEN_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("queen_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_RED).sound(SoundType.SHROOMLIGHT).strength(50.0F, 1200.0F)))).getParentBlock();
    public static final Supplier<Block> ROYAL_GUARDIAN_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_DIAMOND, registerBlock("royal_guardian_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_YELLOW).sound(SoundType.SHROOMLIGHT).strength(50.0F, 1200.0F)))).getParentBlock();
    public static final Supplier<Block> WATER_DRAGON_SCALE_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_IRON, registerBlock("water_dragon_scale_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_LIGHT_BLUE).sound(SoundType.SHROOMLIGHT).strength(5.0F, 6.0F)))).getParentBlock();

    public static final Supplier<Block> SALT_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.COMPONENT_BLOCK_CONSTRUCTED, registerBlock("salt_block", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.TERRACOTTA_WHITE).sound(SoundType.SAND).strength(0.5F)))).getParentBlock();

    // Standard Ores

    // Deepslate Ores

    // Lamp & Mining Blocks
    public static final Supplier<Block> MINING_LAMP = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_BLOCK, registerBlock("mining_lamp", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.SAND).instrument(NoteBlockInstrument.PLING).strength(0.3F).sound(SoundType.GLASS).lightLevel((curState) -> 15)))).getParentBlock();

    public static final Supplier<Block> MINING_WOOD = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_BLOCK, registerBlock("mining_wood", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F).sound(SoundType.WOOD)))).getParentBlock();
    public static final Supplier<Block> MINING_PLANKS = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_PLANKS, registerBlock("mining_planks", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.COLOR_ORANGE).instrument(NoteBlockInstrument.BASS).strength(2.0F, 3.0F).sound(SoundType.WOOD))))
            .cachedBuilder()
            .withRecipe(null)
            .withFlammability(null)
            .build()
            .getParentBlock();
    public static final Supplier<Block> MINING_SLAB = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_SLAB, registerBlock("mining_slab", () -> new SlabBlock(BlockBehaviour.Properties.copy(MINING_PLANKS.get()))))
            .cachedBuilder()
            .withRecipe(null)
            .withFlammability(null)
            .build()
            .getParentBlock();
    public static final Supplier<Block> MINING_FENCE = BlockPropertyWrapper.of(CABlockPropertyWrappers.WOODEN_FENCE, registerBlock("mining_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(MINING_PLANKS.get()))))
            .cachedBuilder()
            .withRecipe(null)
            .withFlammability(null)
            .build()
            .getParentBlock();

    // Stem Blocks
    public static final Supplier<Block> FLOWER_STEM = BlockPropertyWrapper.of(CABlockPropertyWrappers.STEM_BLOCK, registerBlock("flower_stem", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().mapColor(MapColor.PLANT).strength(0.3F).sound(SoundType.WOOD)))).getParentBlock();

    public static final Supplier<Block> BLOOD_RED_PETAL_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.PETAL_BLOCK, registerBlock("blood_red_petal_block", () -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().mapColor(MapColor.PLANT).strength(0.2F).sound(SoundType.GRASS)))).getParentBlock();
    public static final Supplier<Block> BRIGHT_PINK_PETAL_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.PETAL_BLOCK, registerBlock("bright_pink_petal_block", () -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().mapColor(MapColor.PLANT).strength(0.2F).sound(SoundType.GRASS)))).getParentBlock();
    public static final Supplier<Block> NAVY_BLUE_PETAL_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.PETAL_BLOCK, registerBlock("navy_blue_petal_block", () -> new Block(BlockBehaviour.Properties.of().requiresCorrectToolForDrops().mapColor(MapColor.PLANT).strength(0.2F).sound(SoundType.GRASS)))).getParentBlock();

    // General Vegetation
    public static final Supplier<Block> CYAN_ROSE = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("cyan_rose", () -> new CustomizableFlowerBlock(() -> MobEffects.MOVEMENT_SPEED, 7, BlockBehaviour.Properties.copy(Blocks.BLUE_ORCHID), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> RED_ROSE = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("red_rose", () -> new CustomizableFlowerBlock(() -> MobEffects.MOVEMENT_SLOWDOWN, 14, BlockBehaviour.Properties.copy(Blocks.POPPY), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> PAEONIA = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("paeonia", () -> new CustomizableFlowerBlock(() -> MobEffects.SLOW_FALLING, 10, BlockBehaviour.Properties.copy(Blocks.PINK_TULIP), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> SWAMP_MILKWEED = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("swamp_milkweed", () -> new CustomizableFlowerBlock(() -> MobEffects.MOVEMENT_SLOWDOWN, 14, BlockBehaviour.Properties.copy(Blocks.WHITE_TULIP), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> PRIMROSE = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("primrose", () -> new CustomizableFlowerBlock(() -> MobEffects.DIG_SPEED, 14, BlockBehaviour.Properties.copy(Blocks.ALLIUM), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> DAISY = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("daisy", () -> new CustomizableFlowerBlock(() -> MobEffects.JUMP, 14, BlockBehaviour.Properties.copy(Blocks.WHITE_TULIP), VegetationConfig.DEFAULT.getPlantConfig()))).getParentBlock();

    // Mining Paradise Vegetation
    public static final Supplier<Block> DENSE_GRASS_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.GRASS_BLOCK, registerBlock("dense_grass_block", () -> new CustomizableGrassBlock(BlockBehaviour.Properties.copy(Blocks.GRASS_BLOCK).strength(0.75F), () -> VegetationConfig.DENSE))).getParentBlock();
    public static final Supplier<Block> DENSE_DIRT = BlockPropertyWrapper.of(CABlockPropertyWrappers.DIRT, registerBlock("dense_dirt", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DIRT).strength(0.75F)))).getParentBlock();
    public static final Supplier<Block> DENSE_FARMLAND = BlockPropertyWrapper.of(CABlockPropertyWrappers.FARMLAND, registerBlock("dense_farmland", () -> new CustomizableFarmBlock(BlockBehaviour.Properties.copy(Blocks.FARMLAND).strength(0.75F), VegetationConfig.DENSE.getDirtConfig()))).getParentBlock();
    public static final Supplier<Block> DENSE_GRASS = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_PLANT, registerBlock("dense_grass", () -> new CustomizableTallGrassBlock(BlockBehaviour.Properties.copy(Blocks.GRASS), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> TALL_DENSE_GRASS = BlockPropertyWrapper.of(CABlockPropertyWrappers.TALL_PLANT, registerBlock("tall_dense_grass", () -> new CustomizableDoublePlantBlock(BlockBehaviour.Properties.copy(Blocks.TALL_GRASS), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> THORNY_SUN = BlockPropertyWrapper.of(CABlockPropertyWrappers.TALL_FLOWER, registerBlock("thorny_sun", () -> new ThornySunBlock(BlockBehaviour.Properties.copy(Blocks.SUNFLOWER)))).getParentBlock();
    public static final Supplier<Block> BLUE_BULB = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("blue_bulb", () -> new CustomizableFlowerBlock(() -> MobEffects.HEALTH_BOOST, 30, BlockBehaviour.Properties.copy(Blocks.BLUE_ORCHID), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> PINK_BULB = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("pink_bulb", () -> new CustomizableFlowerBlock(() -> MobEffects.HEALTH_BOOST, 30, BlockBehaviour.Properties.copy(Blocks.PINK_TULIP), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> PURPLE_BULB = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("purple_bulb", () -> new CustomizableFlowerBlock(() -> MobEffects.HEALTH_BOOST, 30, BlockBehaviour.Properties.copy(Blocks.ALLIUM), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> DENSE_ORCHID = BlockPropertyWrapper.of(CABlockPropertyWrappers.SMALL_FLOWER, registerBlock("dense_orchid", () -> new CustomizableFlowerBlock(() -> MobEffects.DAMAGE_RESISTANCE, 30, BlockBehaviour.Properties.copy(Blocks.ORANGE_TULIP), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> TERRA_PRETA = BlockPropertyWrapper.of(CABlockPropertyWrappers.DIRT, registerBlock("terra_preta", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DIRT).strength(0.75F)))).getParentBlock();
    public static final Supplier<Block> TERRA_PRETA_FARMLAND = BlockPropertyWrapper.of(CABlockPropertyWrappers.DEFAULTED_FARMLAND, registerBlock("terra_preta_farmland", () -> new TerraPretaFarmBlock(BlockBehaviour.Properties.copy(Blocks.FARMLAND).strength(0.75F)))).getParentBlock();
    public static final Supplier<Block> TAR = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_BLOCK_SHOVEL, registerBlock("tar", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DIRT).sound(SoundType.HONEY_BLOCK).strength(0.75F)))).getParentBlock();
    public static final Supplier<Block> LATOSOL = BlockPropertyWrapper.of(CABlockPropertyWrappers.DIRT, registerBlock("latosol", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DIRT).strength(0.75F)))).getParentBlock();
    public static final Supplier<Block> ALSTROEMERIAT = BlockPropertyWrapper.of(CABlockPropertyWrappers.TALL_FLOWER, registerBlock("alstroemeriat", () -> new CustomizableTallFlowerBlock(BlockBehaviour.Properties.copy(Blocks.LILAC), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> BUSH = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_PLANT, registerBlock("bush", () -> new CustomizableTallGrassBlock(BlockBehaviour.Properties.copy(Blocks.GRASS), VegetationConfig.DENSE_BUSH.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> TALL_BUSH = BlockPropertyWrapper.of(CABlockPropertyWrappers.TALL_PLANT, registerBlock("tall_bush", () -> new CustomizableDoublePlantBlock(BlockBehaviour.Properties.copy(Blocks.TALL_GRASS), VegetationConfig.DENSE_BUSH.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> SMALL_CARNIVOROUS_PLANT = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_FLOWER, registerBlock("small_carnivorous_plant", () -> new CustomizableFlowerBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TULIP), VegetationConfig.DENSE.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> BIG_CARNIVOROUS_PLANT = BlockPropertyWrapper.of(CABlockPropertyWrappers.BASIC_FLOWER, registerBlock("big_carnivorous_plant", () -> new BigCarnivorousPlantBlock(BlockBehaviour.Properties.copy(Blocks.ORANGE_TULIP)))).getParentBlock();

    // CrystalWorld Vegetation
    public static final Supplier<Block> CRYSTAL_GRASS_BLOCK = BlockPropertyWrapper.of(CABlockPropertyWrappers.CRYSTAL_GRASS_BLOCK, registerBlock("crystal_grass_block", () -> new CustomizableGrassBlock(BlockBehaviour.Properties.copy(Blocks.STONE).sound(SoundType.AMETHYST).strength(1.5F), () -> VegetationConfig.CRYSTAL))).getParentBlock();
    public static final Supplier<Block> CRYSTAL_GRASS = BlockPropertyWrapper.of(CABlockPropertyWrappers.CRYSTAL_PLANT, registerBlock("crystal_grass", () -> new CustomizableTallGrassBlock(BlockBehaviour.Properties.copy(Blocks.GRASS).sound(SoundType.AMETHYST), VegetationConfig.CRYSTAL.getPlantConfig()))).getParentBlock();
    public static final Supplier<Block> TALL_CRYSTAL_GRASS = BlockPropertyWrapper.of(CABlockPropertyWrappers.TALL_CRYSTAL_PLANT, registerBlock("tall_crystal_grass", () -> new CustomizableDoublePlantBlock(BlockBehaviour.Properties.copy(Blocks.TALL_GRASS).sound(SoundType.AMETHYST), VegetationConfig.CRYSTAL.getPlantConfig()))).getParentBlock();

    // Fossils
    public static final Supplier<Block> CRYSTALIZED_CRYSTAL_APPLE_COW = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_KYANITE, registerBlock("crystalized_crystal_apple_cow_kyanite", () -> new Block(BlockBehaviour.Properties.copy(Blocks.GLASS)))).getParentBlock();
    public static final Supplier<Block> CRYSTALIZED_CRYSTAL_CARROT_PIG = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_KYANITE, registerBlock("crystalized_crystal_carrot_pig_kyanite", () -> new Block(BlockBehaviour.Properties.of().sound(SoundType.GLASS)))).getParentBlock();
    public static final Supplier<Block> CRYSTALIZED_CRYSTAL_GATOR = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_KYANITE, registerBlock("crystalized_crystal_gator_kyanite", () -> new Block(BlockBehaviour.Properties.copy(Blocks.GLASS)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_ENDERMAN_END_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_END_STONE, registerBlock("fossilized_enderman_end_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.END_STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ENDERMITE_END_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_END_STONE, registerBlock("fossilized_endermite_end_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.END_STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SHULKER_END_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_END_STONE, registerBlock("fossilized_shulker_end_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.END_STONE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_ARTCTIC_FOX_FROZEN = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_ICE, registerBlock("frozen_arctic_fox_ice", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_POLAR_BEAR_FROZEN = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_ICE, registerBlock("frozen_polar_bear_ice", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SNOW_GOLEM_FROZEN = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_ICE, registerBlock("frozen_snow_golem_ice", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_STRAY_FROZEN = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_ICE, registerBlock("frozen_stray_ice", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PACKED_ICE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_GREENFISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_GRAVEL, registerBlock("fossilized_greenfish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ROCK_FISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_GRAVEL, registerBlock("fossilized_rock_fish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SPARK_FISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_GRAVEL, registerBlock("fossilized_spark_fish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WOODFISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_GRAVEL, registerBlock("fossilized_woodfish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_COD_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_cod_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_DOLPHIN_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_dolphin_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_DROWNED_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_drowned_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GLOW_SQUID_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_glow_squid_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GUARDIAN_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_guardian_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PUFFERFISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_pufferfish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SALMON_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_salmon_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SQUID_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_squid_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_TROPICAL_FISH_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_tropical_fish_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_TURTLE_GRAVEL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_GRAVEL, registerBlock("fossilized_turtle_gravel", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.GRAVEL)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_DROWNED_SAND = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_SAND, registerBlock("fossilized_drowned_sand", () -> new FallingBlock(BlockBehaviour.Properties.copy(Blocks.SAND)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_HUSK_SANDSTONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_SANDSTONE, registerBlock("fossilized_husk_sandstone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.SANDSTONE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_CRIMSON_ENT_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_crimson_ent_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_LAVA_EEL_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_lava_eel_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_BLAZE_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_blaze_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ENDERMAN_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_enderman_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_FROG_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_frog_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GHAST_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_ghast_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_HOGLIN_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_hoglin_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_MAGMA_CUBE_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_magma_cube_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PIGLIN_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_piglin_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_STRIDER_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_strider_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WARPED_ENT_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_warped_ent_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WITHER_SKELETON_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_wither_skeleton_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ZOMBIFIED_PIGLIN_NETHERRACK = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_NETHERRACK, registerBlock("fossilized_zombified_piglin_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)))).getParentBlock();

    public static final Supplier<Block> FOSSILISED_MAGMA_CUBE_BLACKSTONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_BLACKSTONE, registerBlock("fossilized_magma_cube_blackstone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.BLACKSTONE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_SKELETON_SOUL_SOIL = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_SOUL_SOIL, registerBlock("fossilized_skeleton_soul_soil", () -> new Block(BlockBehaviour.Properties.copy(Blocks.SOUL_SOIL)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_ACACIA_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_acacia_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_APPLE_COW_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_apple_cow_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_APPLE_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_apple_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_BEAVER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_beaver_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_BIRCH_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_birch_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_BIRD_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_bird_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CARROT_PIG_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_carrot_pig_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CHERRY_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_cherry_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_DARK_OAK_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_dark_oak_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_DIMETRODON_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_dimetrodon_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_EMERALD_GATOR_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_emerald_gator_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_FIREFLY_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_firefly_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GAZELLE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_gazelle_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GOLDEN_APPLE_COW_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_golden_apple_cow_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_GOLDEN_CARROT_PIG_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_golden_carrot_pig_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_HERCULES_BEETLE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_hercules_beetle_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_JUNGLE_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_jungle_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_LETTUCE_CHICKEN_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_lettuce_chicken_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE).instrument(NoteBlockInstrument.DIDGERIDOO)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_MANTIS_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_mantis_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_MOSQUITO_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_mosquito_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_MOTH_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_moth_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_OAK_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_oak_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_OSTRICH_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_ostrich_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PEACH_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_peach_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_RUBY_BUG_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_ruby_bug_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SCORPION_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_scorpion_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SPRUCE_ENT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_CHAOSAWAKENS_STONE, registerBlock("fossilized_spruce_ent_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_BAT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_bat_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_BEE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_bee_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CAT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_cat_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CAVE_SPIDER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_cave_spider_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CHICKEN_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_chicken_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_COW_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_cow_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_CREEPER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_creeper_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_DONKEY_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_donkey_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ENDERMAN_STONE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_enderman_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_EVOKER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_evoker_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_FOX_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_fox_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_FROG_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_frog_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_HORSE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_horse_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_HUSK_STONE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_husk_stone_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_LLAMA_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_llama_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_MOOSHROOM_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_mooshroom_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_OCELOT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_ocelot_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PANDA_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_panda_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PARROT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_parrot_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PHANTOM_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_phantom_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PIG_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_pig_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_PILLAGER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_pillager_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_POLAR_BEAR_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_polar_bear_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_RABBIT_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_rabbit_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_RAVAGER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_ravager_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SHEEP_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_sheep_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SKELETON_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_skeleton_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SKELETON_HORSE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_skeleton_horse_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SLIME_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_slime_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_SPIDER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_spider_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_VILLAGER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_villager_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_VINDICATOR_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_vindicator_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WANDERING_TRADER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_wandering_trader_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WASP_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_wasp_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WITCH_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_witch_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_WOLF_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_wolf_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ZOMBIE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_zombie_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ZOMBIE_HORSE_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_zombie_horse_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();
    public static final Supplier<Block> FOSSILIZED_ZOMBIE_VILLAGER_STONE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_STONE, registerBlock("fossilized_zombie_villager_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.STONE)))).getParentBlock();

    public static final Supplier<Block> FOSSILIZED_WARDEN_DEEPSLATE = BlockPropertyWrapper.of(CABlockPropertyWrappers.FOSSIL_BLOCK_VANILLA_DEEPSLATE, registerBlock("fossilized_warden_deepslate", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DEEPSLATE)))).getParentBlock();

    private static Supplier<Block> registerBlock(String id, Supplier<Block> blockSup) {
        return registerBlock(id, blockSup, new Item.Properties());
    }

    private static Supplier<Block> registerBlock(String id, Supplier<Block> blockSup, Item.Properties blockItemProperties) {
        Supplier<Block> registeredBlock = registerItemlessBlock(id, blockSup);
        registerBlockItem(id, () -> new BlockItem(registeredBlock.get(), blockItemProperties));
        return registeredBlock;
    }

    private static Supplier<Block> registerBlock(String id, Supplier<Block> blockSup, Supplier<Item> itemSup) {
        Supplier<Block> registeredBlock = registerItemlessBlock(id, blockSup);
        registerBlockItem(id, itemSup);
        return registeredBlock;
    }

    private static Supplier<Block> registerItemlessBlock(String id, Supplier<Block> blockSup) {
        Supplier<Block> registeredBlockSup = CAServices.REGISTRAR.registerObject(CAConstants.prefix(id), blockSup, BuiltInRegistries.BLOCK); // Otherwise reference to the block sup is null cuz it needs to be registered b4hand
        BLOCKS.add(registeredBlockSup);
        return registeredBlockSup;
    }

    private static Supplier<Item> registerBlockItem(String id, Supplier<Item> itemSup) {
        Supplier<Item> registeredItemSup = CAServices.REGISTRAR.registerObject(CAConstants.prefix(id), itemSup, BuiltInRegistries.ITEM); // Otherwise reference to the item sup is null cuz it needs to be registered b4hand
        BLOCK_ITEMS.add(registeredItemSup);
        return registeredItemSup;
    }

    public static Supplier<Block> registerExternalBlock(String id, Supplier<Block> blockSup) {
        return registerBlock(id, blockSup);
    }

    public static ImmutableList<Supplier<Block>> getBlocks() {
        return ImmutableList.copyOf(BLOCKS);
    }

    public static ImmutableList<Supplier<Item>> getBlockItems() {
        return ImmutableList.copyOf(BLOCK_ITEMS);
    }
}
